
# Sudoku Puzzle Generator and Solver

This project provides a Sudoku puzzle generator and solver with varying levels of difficulty (Easy, Medium, Hard, and Insane). The program is implemented in Python and includes a graphical user interface (GUI) using Pygame.

## Features

- **Sudoku Puzzle Generation**: Generates Sudoku puzzles with different difficulty levels using a backtracking algorithm. The puzzles are generated such that they have a unique solution.
- **Sudoku Puzzle Solver**: Solves Sudoku puzzles using a backtracking algorithm. The solver can work on user-input puzzles or those generated by the program.
- **Difficulty Assessment**: The difficulty level of a Sudoku puzzle is assessed based on the number of guesses required to solve it. This assessment is compared with human-assigned difficulty levels.
- **Hints Functionality**: The GUI allows users to request hints, where the program will fill in the next correct value for the user.
- **Interactive GUI**: The Pygame-based interface allows users to interactively select difficulty levels, enter numbers, request hints, and solve puzzles.

## Installation

### Requirements

- Python 3.x
- Pygame

To install Pygame, run:

```bash
pip install pygame
```

## Usage

Run the main script to start the Sudoku game:

```bash
python main.py
```

The GUI will open, allowing you to select the difficulty level and interact with the puzzle.

## Algorithm Overview

The Sudoku puzzle generator is based on a backtracking algorithm that generates puzzles with a unique solution. The difficulty of the puzzle is judged by the number of guesses required to solve it.

### Oversimplification of Difficulty Assessment

The algorithm's difficulty assessment is based on the number of guesses required to solve the puzzle, which is an oversimplification for the following reasons:

1. **Non-guessing Solutions**: Some difficult puzzles can be solved without guessing but require specific strategies to determine the next move.
2. **Number Positioning**: The positioning of numbers in relation to each other can significantly affect the difficulty, which this method does not fully account for.

## Future Enhancements

1. **Browser Extension**: Convert this code into a browser extension to help users solve their puzzles directly in the browser.
2. **Research Comparisons**: Compare the backtracking algorithm's solving time on puzzles from old Sudoku books (where difficulty is judged by humans) with the time on puzzles generated by this program.
3. **Difficulty Assessment Adjustment**: Modify the generating function to assess the difficulty of user-input puzzles and compare this to the difficulty assigned by humans.
4. **Graph Analysis**: Analyze the performance of the algorithm on puzzles with the same number of initial vacant positions but different distributions, potentially as a math modeling project.

## Research Insights

I decided to make the algorithm depend on the number of guesses the user has to make to solve the puzzle. This can be considered an oversimplification, but if we look at it from the point of view of the number of inputs, we will have to study the distribution of the squares, not just the numbers, making this more of a mathematical research problem. This is considered an oversimplification for several reasons:

1. **Human Solver Steps**: There are difficult puzzles that can be solved without guessing, but you need to know where to start solving them, which makes this more difficult. Current research estimates how many steps a human solver will need to take to solve a puzzle.
2. **Number Positioning**: This follows from the previous discussion, but one might consider the positioning of the numbers concerning each other.

## Sources

1. [The Model and Algorithm to Estimate the Difficulty Levels of Sudoku Puzzles](https://www.researchgate.net/publication/41940718_The_Model_and_Algorithm_to_Estimate_the_Difficulty_Levels_of_Sudoku_Puzzles)
2. [Difficulty Rating of Sudoku Puzzles: An Overview and Evaluation](https://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=D7B836A087983F111392D1E2CA32AB1F?doi=10.1.1.437.9472&rep=rep1&type=pdf)
3. [Python Sudoku Generator and Solver](https://github.com/JoeKarlsson/python-sudoku-generator-solver/tree/master) - This is the source of generating puzzles with a certain difficulty; this project follows the same algorithm with some modifications.
4. **Additional Inspiration**: The project was inspired by a video from Tech With Tim, with added functionalities such as hint generation, puzzle difficulty selection, and more.
5. [RutledgePaulV/sudoku-generator](https://github.com/RutledgePaulV/sudoku-generator)
6. [GameDev Stack Exchange - Generating Sudoku Puzzles](https://gamedev.stackexchange.com/questions/56149/how-can-i-generate-sudoku-puzzles)
7. [Mathematical Contest in Modeling](https://sites.math.washington.edu/~morrow/mcm/team2306.pdf)
8. [Stack Overflow - Generating Sudoku of a Desired Difficulty](https://stackoverflow.com/questions/10488719/generating-a-sudoku-of-a-desired-difficulty)

## License

This project is open-source and available under the MIT License.
